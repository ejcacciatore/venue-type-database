# -*- coding: utf-8 -*-
"""App.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14uuid0F5QnqHAo__-Qcr5At85hAJyt0d
"""

import pandas as pd
import streamlit as st
import plotly.express as px

# Path to the Excel file
file_path = 'data/Venue_Type_Template_v1.xlsx'

# Streamlit App Configuration
st.set_page_config(page_title="Venue Type Database", page_icon="📊", layout="wide")

st.title("📊 Venue Type Database")
st.sidebar.header("🔎 Interactive Options")

try:
    # Load the Excel file with both sheets
    venue_types = pd.read_excel(file_path, sheet_name='Venue_Types')
    venue_top28 = pd.read_excel(file_path, sheet_name='Venue_Top28')

    # Tabs for navigating between datasets
    tab1, tab2 = st.tabs(["Venue Type Template", "Venue_Top28"])

    # Tab 1: Venue Type Template
    with tab1:
        st.header("📄 Venue Type Template")
        st.dataframe(venue_types, use_container_width=True)

        # Search functionality for Venue Type Template
        search_term = st.text_input("Search in Venue Type Template", "")
        if search_term:
            filtered_venue_types = venue_types[
                venue_types.apply(lambda row: row.astype(str).str.contains(search_term, case=False).any(), axis=1)
            ]
            st.subheader("🔍 Filtered Results")
            st.dataframe(filtered_venue_types, use_container_width=True)
        else:
            st.markdown("Use the search box above to filter rows in the **Venue Type Template** dataset.")

    # Tab 2: Venue_Top28
    with tab2:
        st.header("📄 Venue_Top28 Data")
        st.dataframe(venue_top28, use_container_width=True)

        # Dynamic Filters for Venue_Top28
        st.sidebar.markdown("### 🗂 Filters for Venue_Top28")
        primary_filter = st.sidebar.multiselect(
            "Filter by Primary Type Code", venue_top28["Primary_Type_Code"].unique(), default=None
        )
        secondary_filter = st.sidebar.multiselect(
            "Filter by Secondary Type Code", venue_top28["Secondary_Type_Code"].unique(), default=None
        )
        reporting_filter = st.sidebar.multiselect(
            "Filter by Reporting Type Code", venue_top28["Reporting_Type_Code"].unique(), default=None
        )

        # Apply filters dynamically
        filtered_top28 = venue_top28.copy()
        if primary_filter:
            filtered_top28 = filtered_top28[filtered_top28["Primary_Type_Code"].isin(primary_filter)]
        if secondary_filter:
            filtered_top28 = filtered_top28[filtered_top28["Secondary_Type_Code"].isin(secondary_filter)]
        if reporting_filter:
            filtered_top28 = filtered_top28[filtered_top28["Reporting_Type_Code"].isin(reporting_filter)]

        # Display filtered data
        st.markdown("### 🎛 Filtered Venue_Top28 Results")
        st.dataframe(filtered_top28, use_container_width=True)

        # Visualization for filtered data
        if not filtered_top28.empty:
            st.markdown("## 📈 Data Visualizations")
            chart_column = st.selectbox(
                "Choose a column for Chart Visualization",
                ["Primary_Type_Code", "Secondary_Type_Code", "Reporting_Type_Code"]
            )
            chart = px.bar(
                filtered_top28,
                x=chart_column,
                y="Venue_Name",
                color=chart_column,
                title=f"Distribution by {chart_column}",
                template="plotly_white"
            )
            st.plotly_chart(chart, use_container_width=True)
        else:
            st.warning("No data available for visualization. Adjust your filters.")

    # Download Options
    st.sidebar.markdown("## 📂 Download Options")
    download_choice = st.sidebar.radio("Choose Data to Download", ["Venue Type Template", "Venue_Top28"])
    if download_choice == "Venue Type Template":
        data_to_download = venue_types
    else:
        data_to_download = filtered_top28 if not filtered_top28.empty else venue_top28

    st.sidebar.download_button(
        label=f"Download {download_choice} Data",
        data=data_to_download.to_csv(index=False),
        file_name=f"{download_choice.replace(' ', '_')}.csv",
        mime="text/csv",
    )

except FileNotFoundError:
    st.error(f"Excel file not found at path: {file_path}")
except Exception as e:
    st.error(f"An error occurred: {e}")